#!/bin/bash

#this script will get the modified files that are about to be pushed and 
#will run linters on them depending on the format (.php/.class, js, or md)
#it will cancel the push if any linter finds an error
#it is assumed upstream for the current branch has been set
#paste this in .git/hooks/ to have it run automatically

found_errors=false
upstream=$1
echo "upstream: $1"
branch=$(git rev-parse --abbrev-ref HEAD)
mapfile -t ucommits <<< "$(git rev-list "$upstream"/"$branch"..HEAD)"
#echo "ucommits: "${ucommits[*]}""
echo "${#ucommits[*]} unpushed commit(s) in $branch"
declare -A unique_files
for commit in "${ucommits[@]}"
do
    #it's possible to push no commits if you're force pushing a reset
    #therefore check that the commit is not null
   if [ -n "$commit" ]; then
      # echo "commit "$commit""
       modified_files=$(git diff-tree --no-commit-id --name-only -r "$commit")
       readarray -t files_arr <<< "${modified_files[@]}"
       for file in "${files_arr[@]}"
       do
           unique_files["$file"]=1
       done
   fi  
done
echo "${#unique_files[*]} modified files: ${!unique_files[*]}"
for file in "${!unique_files[@]}"
do
    if ( [[ $file == *".php" || $file == *".class"* ]] && ! phpcs "$file") \
        || ( [[ $file == *".js" ]] && ! npx eslint "$file") \
        || ( [[ $file == *".md" ]] && ! npx alex "$file") ; then
            found_errors=true
    fi  
done
if $found_errors ; then 
    echo "Detected some linting errors, aborting push"
    exit 1
fi
exit 0
